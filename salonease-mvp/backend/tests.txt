FAIL tests/models/User.test.js
  ● Console

    console.log
      Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Users'

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Executing (default): INSERT INTO "Users" ("id","fullName","email","password","role","isEmailVerified","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7) RETURNING "id","fullName","email","password","role","isEmailVerified","createdAt","updatedAt";

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Executing (default): SELECT "id", "fullName", "email", "password", "role", "isEmailVerified", "createdAt", "updatedAt" FROM "Users" AS "User" WHERE "User"."id" = 10;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Executing (default): DELETE FROM "Users" WHERE "id" = 10

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Executing (default): INSERT INTO "Users" ("id","fullName","email","password","role","isEmailVerified","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7) RETURNING "id","fullName","email","password","role","isEmailVerified","createdAt","updatedAt";

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Executing (default): INSERT INTO "Users" ("id","fullName","email","password","role","isEmailVerified","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7) RETURNING "id","fullName","email","password","role","isEmailVerified","createdAt","updatedAt";

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Executing (default): DELETE FROM "Users" WHERE "id" = 10

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Executing (default): DELETE FROM "Users" WHERE "id" = 1

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

  ● User Model › should create a user with valid attributes



      14 |     // Cleanup: Remove only the users created during the tests
      15 |     for (const user of createdUsers) {
    > 16 |       await User.destroy({ where: { id: user.id } });
         |       ^
      17 |     }
      18 |     createdUsers = [];
      19 |   });

      at Query.run (node_modules/sequelize/src/dialects/postgres/query.js:76:25)
      at node_modules/sequelize/src/sequelize.js:650:28
      at PostgresQueryInterface.bulkDelete (node_modules/sequelize/src/dialects/abstract/query-interface.js:992:12)
      at Function.destroy (node_modules/sequelize/src/model.js:3083:16)
      at Object.<anonymous> (tests/models/User.test.js:16:7)

FAIL tests/routes/authRoutes.test.js
  ● Console

    console.log
      Executing (default): DROP TABLE IF EXISTS "Users" CASCADE;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Users' AND tc.table_catalog = 'salonease_test'

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Executing (default): DROP TABLE IF EXISTS "Users" CASCADE;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Executing (default): DROP TABLE IF EXISTS "Users" CASCADE;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Executing (default): CREATE TABLE IF NOT EXISTS "Users" ("id"   SERIAL , "fullName" VARCHAR(255) NOT NULL, "email" VARCHAR(255) NOT NULL UNIQUE, "password" VARCHAR(255) NOT NULL, "role" VARCHAR(255) DEFAULT 'SalonOwner', "isEmailVerified" BOOLEAN DEFAULT false, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Registering user: { fullName: 'Test User', email: 'testuser@example.com' }

      at Object.<anonymous>.exports.register (src/controllers/authController.js:8:11)

    console.log
      Executing (default): SELECT "id", "fullName", "email", "password", "role", "isEmailVerified", "createdAt", "updatedAt" FROM "Users" AS "User" WHERE "User"."email" = 'testuser@example.com';

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.error
      Registration failed: Error: 
          at Query.run (/app/node_modules/sequelize/src/dialects/postgres/query.js:76:25)
          at /app/node_modules/sequelize/src/sequelize.js:650:28
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at PostgresQueryInterface.select (/app/node_modules/sequelize/src/dialects/abstract/query-interface.js:1001:12)
          at Function.findAll (/app/node_modules/sequelize/src/model.js:1824:21)
          at Function.findOne (/app/node_modules/sequelize/src/model.js:1998:12)
          at Object.<anonymous>.exports.register (/app/src/controllers/authController.js:26:26) {
        name: 'SequelizeDatabaseError',
        parent: error: relation "Users" does not exist
            at Parser.parseErrorMessage (/app/node_modules/pg-protocol/src/parser.ts:368:69)
            at Parser.handlePacket (/app/node_modules/pg-protocol/src/parser.ts:187:21)
            at Parser.parse (/app/node_modules/pg-protocol/src/parser.ts:102:30)
            at Socket.<anonymous> (/app/node_modules/pg-protocol/src/index.ts:7:48)
            at Socket.emit (node:events:517:28)
            at addChunk (node:internal/streams/readable:368:12)
            at readableAddChunk (node:internal/streams/readable:341:9)
            at Socket.Readable.push (node:internal/streams/readable:278:10)
            at TCP.onStreamRead (node:internal/stream_base_commons:190:23) {
          length: 105,
          severity: 'ERROR',
          code: '42P01',
          detail: undefined,
          hint: undefined,
          position: '104',
          internalPosition: undefined,
          internalQuery: undefined,
          where: undefined,
          schema: undefined,
          table: undefined,
          column: undefined,
          dataType: undefined,
          constraint: undefined,
          file: 'parse_relation.c',
          line: '1373',
          routine: 'parserOpenTable',
          sql: `SELECT "id", "fullName", "email", "password", "role", "isEmailVerified", "createdAt", "updatedAt" FROM "Users" AS "User" WHERE "User"."email" = 'testuser@example.com';`,
          parameters: undefined
        },
        original: error: relation "Users" does not exist
            at Parser.parseErrorMessage (/app/node_modules/pg-protocol/src/parser.ts:368:69)
            at Parser.handlePacket (/app/node_modules/pg-protocol/src/parser.ts:187:21)
            at Parser.parse (/app/node_modules/pg-protocol/src/parser.ts:102:30)
            at Socket.<anonymous> (/app/node_modules/pg-protocol/src/index.ts:7:48)
            at Socket.emit (node:events:517:28)
            at addChunk (node:internal/streams/readable:368:12)
            at readableAddChunk (node:internal/streams/readable:341:9)
            at Socket.Readable.push (node:internal/streams/readable:278:10)
            at TCP.onStreamRead (node:internal/stream_base_commons:190:23) {
          length: 105,
          severity: 'ERROR',
          code: '42P01',
          detail: undefined,
          hint: undefined,
          position: '104',
          internalPosition: undefined,
          internalQuery: undefined,
          where: undefined,
          schema: undefined,
          table: undefined,
          column: undefined,
          dataType: undefined,
          constraint: undefined,
          file: 'parse_relation.c',
          line: '1373',
          routine: 'parserOpenTable',
          sql: `SELECT "id", "fullName", "email", "password", "role", "isEmailVerified", "createdAt", "updatedAt" FROM "Users" AS "User" WHERE "User"."email" = 'testuser@example.com';`,
          parameters: undefined
        },
        sql: `SELECT "id", "fullName", "email", "password", "role", "isEmailVerified", "createdAt", "updatedAt" FROM "Users" AS "User" WHERE "User"."email" = 'testuser@example.com';`,
        parameters: {}
      }

      53 |     res.status(201).json({ message: 'Registration successful. Please check your email to verify your account.' });
      54 |   } catch (error) {
    > 55 |     console.error('Registration failed:', error);
         |             ^
      56 |     res.status(500).json({ message: 'Registration failed', error: error.message });
      57 |   }
      58 | };

      at Object.<anonymous>.exports.register (src/controllers/authController.js:55:13)

    console.log
      Response Status: 500

      at Object.<anonymous> (tests/routes/authRoutes.test.js:35:13)

    console.log
      Response Body: {
        message: 'Registration failed',
        error: 'relation "Users" does not exist'
      }

      at Object.<anonymous> (tests/routes/authRoutes.test.js:36:13)

    console.log
      Executing (default): INSERT INTO "Users" ("id","fullName","email","password","role","isEmailVerified","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7) RETURNING "id","fullName","email","password","role","isEmailVerified","createdAt","updatedAt";

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Registering user: { fullName: 'New User', email: 'existinguser@example.com' }

      at Object.<anonymous>.exports.register (src/controllers/authController.js:8:11)

    console.log
      Executing (default): SELECT "id", "fullName", "email", "password", "role", "isEmailVerified", "createdAt", "updatedAt" FROM "Users" AS "User" WHERE "User"."email" = 'existinguser@example.com';

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Email already exists: existinguser@example.com

      at Object.<anonymous>.exports.register (src/controllers/authController.js:28:15)

    console.log
      Executing (default): DELETE FROM "Users" WHERE "id" = 3

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Registering user: { fullName: 'Invalid Email User', email: 'invalid-email' }

      at Object.<anonymous>.exports.register (src/controllers/authController.js:8:11)

    console.log
      Invalid email format: invalid-email

      at Object.<anonymous>.exports.register (src/controllers/authController.js:14:15)

  ● POST /api/auth/register › should register a new user successfully

    expect(received).toBe(expected) // Object.is equality

    Expected: 201
    Received: 500

      36 |     console.log('Response Body:', response.body);
      37 |
    > 38 |     expect(response.statusCode).toBe(201);
         |                                 ^
      39 |     expect(response.body.message).toBe('Registration successful. Please check your email to verify your account.');
      40 |
      41 |     // Track created user for cleanup

      at Object.<anonymous> (tests/routes/authRoutes.test.js:38:33)

PASS tests/controllers/authController.test.js
  ● Console

    console.log
      Executing (default): DROP TABLE IF EXISTS "Users" CASCADE;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Users' AND tc.table_catalog = 'salonease_test'

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Executing (default): DROP TABLE IF EXISTS "Users" CASCADE;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Executing (default): DROP TABLE IF EXISTS "Users" CASCADE;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Executing (default): CREATE TABLE IF NOT EXISTS "Users" ("id"   SERIAL , "fullName" VARCHAR(255) NOT NULL, "email" VARCHAR(255) NOT NULL UNIQUE, "password" VARCHAR(255) NOT NULL, "role" VARCHAR(255) DEFAULT 'SalonOwner', "isEmailVerified" BOOLEAN DEFAULT false, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Registering user: { fullName: 'Test User', email: 'uniqueuser@example.com' }

      at register (src/controllers/authController.js:8:11)

    console.log
      Executing (default): SELECT "id", "fullName", "email", "password", "role", "isEmailVerified", "createdAt", "updatedAt" FROM "Users" AS "User" WHERE "User"."email" = 'uniqueuser@example.com';

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Password hashed successfully

      at Object.<anonymous>.exports.register (src/controllers/authController.js:34:13)

    console.log
      Executing (default): INSERT INTO "Users" ("id","fullName","email","password","role","isEmailVerified","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7) RETURNING "id","fullName","email","password","role","isEmailVerified","createdAt","updatedAt";

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      User created successfully: User {
        dataValues: {
          isEmailVerified: false,
          id: 4,
          fullName: 'Test User',
          email: 'uniqueuser@example.com',
          password: '$2b$10$DLYGz2BajoFG/d8P1c7ih.3AJ6/mX.11XYjJvdbI5e3O9s6y2CqUS',
          role: 'SalonOwner',
          updatedAt: 2024-10-16T09:12:04.009Z,
          createdAt: 2024-10-16T09:12:04.009Z
        },
        _previousDataValues: {
          fullName: 'Test User',
          email: 'uniqueuser@example.com',
          password: '$2b$10$DLYGz2BajoFG/d8P1c7ih.3AJ6/mX.11XYjJvdbI5e3O9s6y2CqUS',
          role: 'SalonOwner',
          id: 4,
          isEmailVerified: false,
          createdAt: 2024-10-16T09:12:04.009Z,
          updatedAt: 2024-10-16T09:12:04.009Z
        },
        uniqno: 1,
        _changed: Set(0) {},
        _options: {
          isNewRecord: true,
          _schema: null,
          _schemaDelimiter: '',
          attributes: undefined,
          include: undefined,
          raw: undefined,
          silent: undefined
        },
        isNewRecord: false
      }

      at Object.<anonymous>.exports.register (src/controllers/authController.js:43:13)

    console.log
      Verification token generated: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjQsImlhdCI6MTcyOTA2OTkyNCwiZXhwIjoxNzI5MDczNTI0fQ.3zop8Xx86KENFx9rt7Rt1ml4QV_iPpzgSYIdB_9F-fQ

      at Object.<anonymous>.exports.register (src/controllers/authController.js:47:13)

    console.log
      Sending verification email to uniqueuser@example.com with token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjQsImlhdCI6MTcyOTA2OTkyNCwiZXhwIjoxNzI5MDczNTI0fQ.3zop8Xx86KENFx9rt7Rt1ml4QV_iPpzgSYIdB_9F-fQ

      at Object.sendVerificationEmail (src/utils/helpers/emailHelper.js:3:11)

    console.log
      Verification email sent to: uniqueuser@example.com

      at Object.<anonymous>.exports.register (src/controllers/authController.js:51:13)

    console.log
      Response Status: 201

      at Object.<anonymous> (tests/controllers/authController.test.js:46:13)

    console.log
      Response Data: {
        message: 'Registration successful. Please check your email to verify your account.'
      }

      at Object.<anonymous> (tests/controllers/authController.test.js:47:13)

    console.log
      Executing (default): SELECT "id", "fullName", "email", "password", "role", "isEmailVerified", "createdAt", "updatedAt" FROM "Users" AS "User" WHERE "User"."email" = 'uniqueuser@example.com';

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Executing (default): DELETE FROM "Users" WHERE "id" = 4

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Executing (default): INSERT INTO "Users" ("id","fullName","email","password","role","isEmailVerified","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7) RETURNING "id","fullName","email","password","role","isEmailVerified","createdAt","updatedAt";

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      User {
        dataValues: {
          role: 'SalonOwner',
          isEmailVerified: false,
          id: 5,
          fullName: 'Test User',
          email: 'testuser@example.com',
          password: 'Password123!',
          updatedAt: 2024-10-16T09:12:04.027Z,
          createdAt: 2024-10-16T09:12:04.027Z
        },
        _previousDataValues: {
          fullName: 'Test User',
          email: 'testuser@example.com',
          password: 'Password123!',
          id: 5,
          role: 'SalonOwner',
          isEmailVerified: false,
          createdAt: 2024-10-16T09:12:04.027Z,
          updatedAt: 2024-10-16T09:12:04.027Z
        },
        uniqno: 1,
        _changed: Set(0) {},
        _options: {
          isNewRecord: true,
          _schema: null,
          _schemaDelimiter: '',
          attributes: undefined,
          include: undefined,
          raw: undefined,
          silent: undefined
        },
        isNewRecord: false
      }

      at Object.<anonymous> (tests/controllers/authController.test.js:66:13)

    console.log
      Registering user: { fullName: 'Test User', email: 'testuser@example.com' }

      at register (src/controllers/authController.js:8:11)

    console.log
      Executing (default): SELECT "id", "fullName", "email", "password", "role", "isEmailVerified", "createdAt", "updatedAt" FROM "Users" AS "User" WHERE "User"."email" = 'testuser@example.com';

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Email already exists: testuser@example.com

      at Object.<anonymous>.exports.register (src/controllers/authController.js:28:15)

    console.log
      Response Status: 400

      at Object.<anonymous> (tests/controllers/authController.test.js:71:13)

    console.log
      Response Data: { message: 'Email already exists' }

      at Object.<anonymous> (tests/controllers/authController.test.js:72:13)

    console.log
      Executing (default): DELETE FROM "Users" WHERE "id" = 5

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Registering user: { fullName: 'Test User', email: 'anotheruniqueuser@example.com' }

      at register (src/controllers/authController.js:8:11)

    console.log
      Weak password: weakpass

      at register (src/controllers/authController.js:21:15)

    console.log
      Response Status: 400

      at Object.<anonymous> (tests/controllers/authController.test.js:87:13)

    console.log
      Response Data: {
        message: 'Password must be at least 8 characters long and include uppercase letters, numbers, and special characters.'
      }

      at Object.<anonymous> (tests/controllers/authController.test.js:88:13)

    console.log
      Executing (default): INSERT INTO "Users" ("id","fullName","email","password","role","isEmailVerified","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7) RETURNING "id","fullName","email","password","role","isEmailVerified","createdAt","updatedAt";

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Verifying email with token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjYsImlhdCI6MTcyOTA2OTkyNCwiZXhwIjoxNzI5MDczNTI0fQ.mCglp3uu2NLXgVyoqnhJsfdAJ48mrVOFQ03LvT3H3XY

      at Object.<anonymous>.exports.verifyEmail (src/controllers/authController.js:62:11)

    console.log
      Token verified, userId: 6

      at Object.<anonymous>.exports.verifyEmail (src/controllers/authController.js:68:13)

    console.log
      Executing (default): SELECT "id", "fullName", "email", "password", "role", "isEmailVerified", "createdAt", "updatedAt" FROM "Users" AS "User" WHERE "User"."id" = 6;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Executing (default): UPDATE "Users" SET "isEmailVerified"=$1,"updatedAt"=$2 WHERE "id" = $3

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Email verified for userId: 6

      at Object.<anonymous>.exports.verifyEmail (src/controllers/authController.js:79:13)

    console.log
      Response Status: 200

      at Object.<anonymous> (tests/controllers/authController.test.js:110:13)

    console.log
      Response Data: { message: 'Email verified successfully. You can now log in.' }

      at Object.<anonymous> (tests/controllers/authController.test.js:111:13)

    console.log
      Executing (default): SELECT "id", "fullName", "email", "password", "role", "isEmailVerified", "createdAt", "updatedAt" FROM "Users" AS "User" WHERE "User"."id" = 6;

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Executing (default): DELETE FROM "Users" WHERE "id" = 6

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Verifying email with token: invalidtoken

      at Object.<anonymous>.exports.verifyEmail (src/controllers/authController.js:62:11)

    console.error
      Email verification failed: JsonWebTokenError {
        name: 'JsonWebTokenError',
        message: 'jwt malformed'
      }

      81 |     res.status(200).json({ message: 'Email verified successfully. You can now log in.' });
      82 |   } catch (error) {
    > 83 |     console.error('Email verification failed:', error);
         |             ^
      84 |     res.status(400).json({ message: 'Invalid or expired token', error: error.message });
      85 |   }
      86 | };

      at Object.<anonymous>.exports.verifyEmail (src/controllers/authController.js:83:13)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at next (node_modules/express/lib/router/route.js:149:13)
      at Route.dispatch (node_modules/express/lib/router/route.js:119:3)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at node_modules/express/lib/router/index.js:284:15
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Function.handle (node_modules/express/lib/router/index.js:175:3)
      at router (node_modules/express/lib/router/index.js:47:12)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at trim_prefix (node_modules/express/lib/router/index.js:328:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at urlencodedParser (node_modules/body-parser/lib/types/urlencoded.js:94:7)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at trim_prefix (node_modules/express/lib/router/index.js:328:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at jsonParser (node_modules/body-parser/lib/types/json.js:113:7)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at trim_prefix (node_modules/express/lib/router/index.js:328:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at cors (node_modules/cors/lib/index.js:188:7)
      at node_modules/cors/lib/index.js:224:17
      at originCallback (node_modules/cors/lib/index.js:214:15)
      at node_modules/cors/lib/index.js:219:13
      at optionsCallback (node_modules/cors/lib/index.js:199:9)
      at corsMiddleware (node_modules/cors/lib/index.js:204:7)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at trim_prefix (node_modules/express/lib/router/index.js:328:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at expressInit (node_modules/express/lib/middleware/init.js:40:5)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at trim_prefix (node_modules/express/lib/router/index.js:328:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at query (node_modules/express/lib/middleware/query.js:45:5)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at trim_prefix (node_modules/express/lib/router/index.js:328:13)
      at node_modules/express/lib/router/index.js:286:9

    console.log
      Response Status: 400

      at Object.<anonymous> (tests/controllers/authController.test.js:126:13)

    console.log
      Response Data: { message: 'Invalid or expired token', error: 'jwt malformed' }

      at Object.<anonymous> (tests/controllers/authController.test.js:127:13)

    console.log
      Executing (default): INSERT INTO "Users" ("id","fullName","email","password","role","isEmailVerified","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7) RETURNING "id","fullName","email","password","role","isEmailVerified","createdAt","updatedAt";

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Logging in user: loginuser@example.com

      at Object.<anonymous>.exports.login (src/controllers/authController.js:90:11)

    console.log
      Executing (default): SELECT "id", "fullName", "email", "password", "role", "isEmailVerified", "createdAt", "updatedAt" FROM "Users" AS "User" WHERE "User"."email" = 'loginuser@example.com';

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Login successful, token generated for user: loginuser@example.com

      at Object.<anonymous>.exports.login (src/controllers/authController.js:115:13)

    console.log
      Response Status: 200

      at Object.<anonymous> (tests/controllers/authController.test.js:148:13)

    console.log
      Response Data: {
        token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjcsInJvbGUiOiJTYWxvbk93bmVyIiwiaWF0IjoxNzI5MDY5OTI0LCJleHAiOjE3MjkwNzM1MjR9.FEHzD_SPekI6D6FthBBAKp_n3e0JNw633DTc8aCv_8c',
        user: { id: 7, fullName: 'Test User', role: 'SalonOwner' }
      }

      at Object.<anonymous> (tests/controllers/authController.test.js:149:13)

    console.log
      Executing (default): DELETE FROM "Users" WHERE "id" = 7

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Executing (default): INSERT INTO "Users" ("id","fullName","email","password","role","isEmailVerified","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7) RETURNING "id","fullName","email","password","role","isEmailVerified","createdAt","updatedAt";

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Logging in user: invalidlogin@example.com

      at Object.<anonymous>.exports.login (src/controllers/authController.js:90:11)

    console.log
      Executing (default): SELECT "id", "fullName", "email", "password", "role", "isEmailVerified", "createdAt", "updatedAt" FROM "Users" AS "User" WHERE "User"."email" = 'invalidlogin@example.com';

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Invalid password for user: invalidlogin@example.com

      at Object.<anonymous>.exports.login (src/controllers/authController.js:103:15)

    console.log
      Response Status: 401

      at Object.<anonymous> (tests/controllers/authController.test.js:175:13)

    console.log
      Response Data: { message: 'Invalid email or password' }

      at Object.<anonymous> (tests/controllers/authController.test.js:176:13)

    console.log
      Executing (default): DELETE FROM "Users" WHERE "id" = 8

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Executing (default): INSERT INTO "Users" ("id","fullName","email","password","role","isEmailVerified","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7) RETURNING "id","fullName","email","password","role","isEmailVerified","createdAt","updatedAt";

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Logging in user: nonverified@example.com

      at Object.<anonymous>.exports.login (src/controllers/authController.js:90:11)

    console.log
      Executing (default): SELECT "id", "fullName", "email", "password", "role", "isEmailVerified", "createdAt", "updatedAt" FROM "Users" AS "User" WHERE "User"."email" = 'nonverified@example.com';

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)

    console.log
      Email not verified for user: nonverified@example.com

      at Object.<anonymous>.exports.login (src/controllers/authController.js:109:15)

    console.log
      Response Status: 403

      at Object.<anonymous> (tests/controllers/authController.test.js:201:13)

    console.log
      Response Data: { message: 'Please verify your email before logging in' }

      at Object.<anonymous> (tests/controllers/authController.test.js:202:13)

    console.log
      Executing (default): DELETE FROM "Users" WHERE "id" = 9

      at Sequelize.log (node_modules/sequelize/src/sequelize.js:1281:15)


Test Suites: 2 failed, 1 passed, 3 total
Tests:       2 failed, 11 passed, 13 total
Snapshots:   0 total
Time:        1.253 s, estimated 2 s
Ran all test suites.
