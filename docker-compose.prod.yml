services:
  traefik:
    image: traefik:v2.10
    env_file:
      - ./salonease-mvp/backend/.env
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=admin@zenmanager.eu"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
    networks:
      - app-network
    restart: unless-stopped

  frontend:
    image: ghcr.io/man0l/salonease:frontend-latest
    env_file:
      - ./salonease-mvp/frontend/.env
    environment:
      - REACT_APP_API_URL=https://zenmanager.eu/api
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`zenmanager.eu`) && !PathPrefix(`/api`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
      - "com.centurylinklabs.watchtower.enable=true"
    networks:
      - app-network
    depends_on:
      - backend
    restart: unless-stopped

  backend:
    image: ghcr.io/man0l/salonease:backend-latest
    env_file:
      - ./salonease-mvp/backend/.env
    environment:
      - NODE_ENV=production
      - FRONTEND_URL=https://zenmanager.eu
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`zenmanager.eu`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=myresolver"
      - "traefik.http.services.backend.loadbalancer.server.port=5000"
      - "traefik.http.middlewares.strip-api-prefix.stripprefix.prefixes=/api"
      - "traefik.http.routers.backend.middlewares=strip-api-prefix@docker"
      - "com.centurylinklabs.watchtower.enable=true"
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    command: >
      sh -c "npx sequelize-cli db:migrate &&
             node src/server.js"

  db:
    image: postgres:13-alpine
    env_file:
      - ./salonease-mvp/backend/.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4
    env_file:
      - ./salonease-mvp/backend/.env
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=Host(`pgadmin.zenmanager.eu`)"
      - "traefik.http.routers.pgadmin.entrypoints=websecure"
      - "traefik.http.routers.pgadmin.tls.certresolver=myresolver"
      - "traefik.http.services.pgadmin.loadbalancer.server.port=80"
    networks:
      - app-network
    depends_on:
      - db
    restart: unless-stopped
  watchtower:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_LABEL_ENABLE=true
    command: --interval 300 --label-enable
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  pgadmin_data: 